// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/manicar2093/web-monitor/entities"
	mock "github.com/stretchr/testify/mock"
)

// PhraseDao is an autogenerated mock type for the PhraseDao type
type PhraseDao struct {
	mock.Mock
}

// Delete provides a mock function with given fields: phraseID
func (_m *PhraseDao) Delete(phraseID string) error {
	ret := _m.Called(phraseID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(phraseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPhrases provides a mock function with given fields:
func (_m *PhraseDao) GetAllPhrases() ([]entities.Phrase, error) {
	ret := _m.Called()

	var r0 []entities.Phrase
	if rf, ok := ret.Get(0).(func() []entities.Phrase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Phrase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: phrase
func (_m *PhraseDao) Save(phrase entities.Phrase) error {
	ret := _m.Called(phrase)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Phrase) error); ok {
		r0 = rf(phrase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: phrase
func (_m *PhraseDao) Update(phrase *entities.Phrase) error {
	ret := _m.Called(phrase)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Phrase) error); ok {
		r0 = rf(phrase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
